#ifndef _GPS_H
#define _GPS_H

//#include "globals.h"
#include <TinyGPS++.h>
#include <HardwareSerial.h>

class Neo6m
{

public:
    void init();
    bool checkGpsFix();
    void buildPacket(uint8_t txBuffer[9]);
    void encode();
    void enable_sleep();
    void wakeup();
    void softwareReset();
    void ecoMode();
    TinyGPSPlus tGps;

private:
    uint32_t LatitudeBinary, LongitudeBinary;
    uint16_t altitudeGps;
    uint8_t hdopGps;
    char t[32];                                                                                                                  // used to sprintf for Serial output
    const uint8_t RXM_PMREQ[16] = {0xb5, 0x62, 0x02, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x4d, 0x3b}; //power off until wakeup call
    uint8_t GPSon[16] = {0xB5, 0x62, 0x02, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4C, 0x37};
    //31.19 CFG-RST (0x06 0x04) checksum calculation https://gist.github.com/tomazas/3ab51f91cdc418f5704d
    uint8_t CFG_RST[12] = {0xb5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0F, 0x66}; //Controlled Software reset
    uint8_t CFG_RXM[10] = {0xb5, 0x62, 0x06, 0x11, 0x02, 0x00, 0x08, 0x04, 0x25, 0x95};             //Eco Mode
    //byte RANDOM_LONG_MESSAGE[16] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
};

#endif

extern Neo6m gps;